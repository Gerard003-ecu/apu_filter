================================================================= test session starts ==================================================================
platform darwin -- Python 3.12.3, pytest-8.4.2, pluggy-1.6.0 -- /Users/gerardomayor/Documents/estru_techos/apu_filter/.venv/bin/python3
cachedir: .pytest_cache
rootdir: /Users/gerardomayor/Documents/estru_techos/apu_filter
configfile: pyproject.toml
collected 38 items

tests/test_app.py::TestAppEndpoints::test_get_estimate_with_session FAILED                                                                       [  2%]
tests/test_data_validator.py::TestDataValidator::test_validate_and_clean_data_integration PASSED                                                 [  5%]
tests/test_data_validator.py::TestDataValidator::test_validate_extreme_costs PASSED                                                              [  7%]
tests/test_data_validator.py::TestDataValidator::test_validate_missing_descriptions PASSED                                                       [ 10%]
tests/test_data_validator.py::TestDataValidator::test_validate_zero_quantity_with_cost PASSED                                                    [ 13%]
tests/test_estimator.py::TestEstimator::test_calculate_estimate_flexible_search FAILED                                                           [ 15%]
tests/test_estimator.py::TestEstimator::test_calculate_estimate_logic_two_step FAILED                                                            [ 18%]
tests/test_models.py::TestProbabilityModels::test_sanitize_value PASSED                                                                          [ 21%]
tests/test_models.py::TestProbabilityModels::test_simulation_handles_empty_input PASSED                                                          [ 23%]
tests/test_models.py::TestProbabilityModels::test_simulation_handles_missing_columns PASSED                                                      [ 26%]
tests/test_models.py::TestProbabilityModels::test_simulation_handles_zero_cost_input PASSED                                                      [ 28%]
tests/test_models.py::TestProbabilityModels::test_simulation_returns_correct_structure PASSED                                                    [ 31%]
tests/test_models.py::TestProbabilityModels::test_simulation_values_are_reasonable PASSED                                                        [ 34%]
tests/test_procesador_csv.py::TestCSVProcessor::test_abnormally_high_cost_triggers_error FAILED                                                  [ 36%]
tests/test_procesador_csv.py::TestCSVProcessor::test_cartesian_explosion_on_final_merge PASSED                                                   [ 39%]
tests/test_procesador_csv.py::TestCSVProcessor::test_duplicate_codigo_apu_in_presupuesto PASSED                                                  [ 42%]
tests/test_procesador_csv.py::TestCSVProcessor::test_duplicate_insumos_keeps_higher_price PASSED                                                 [ 44%]
tests/test_procesador_csv.py::TestCSVProcessor::test_process_all_files_structure_and_calculations FAILED                                         [ 47%]
tests/test_report_parser.py::TestNewReportParser::test_apu_code_cleaning PASSED                                                                  [ 50%]
tests/test_report_parser.py::TestNewReportParser::test_basic_parsing_and_context_detection PASSED                                                [ 52%]
tests/test_report_parser.py::TestNewReportParser::test_category_detection_before_insumos PASSED                                                  [ 55%]
tests/test_report_parser.py::TestNewReportParser::test_category_detection_variations PASSED                                                      [ 57%]
tests/test_report_parser.py::TestNewReportParser::test_description_capture_robustness PASSED                                                     [ 60%]
tests/test_report_parser.py::TestNewReportParser::test_discard_insumo_with_zero_values PASSED                                                    [ 63%]
tests/test_report_parser.py::TestNewReportParser::test_encoding_handling PASSED                                                                  [ 65%]
tests/test_report_parser.py::TestNewReportParser::test_error_handling PASSED                                                                     [ 68%]
tests/test_report_parser.py::TestNewReportParser::test_fallback_parsing_mechanism PASSED                                                         [ 71%]
tests/test_report_parser.py::TestNewReportParser::test_ignore_garbage_lines PASSED                                                               [ 73%]
tests/test_report_parser.py::TestNewReportParser::test_mano_de_obra_compleja_logic PASSED                                                        [ 76%]
tests/test_report_parser.py::TestNewReportParser::test_mano_de_obra_simple_logic PASSED                                                          [ 78%]
tests/test_report_parser.py::TestNewReportParser::test_mo_detection_by_keywords PASSED                                                           [ 81%]
tests/test_report_parser.py::TestNewReportParser::test_multiple_apus_parsing PASSED                                                              [ 84%]
tests/test_report_parser.py::TestNewReportParser::test_prevent_data_contamination PASSED                                                         [ 86%]
tests/test_report_parser.py::TestNewReportParser::test_state_transitions PASSED                                                                  [ 89%]
tests/test_report_parser.py::TestNewReportParser::test_unit_extraction_robustness PASSED                                                         [ 92%]
tests/test_report_parser_issue.py::TestReportParserWithRealData::test_dataframe_is_not_empty_with_real_data PASSED                               [ 94%]
tests/test_report_parser_issue.py::TestReportParserWithRealData::test_finds_a_significant_number_of_apus PASSED                                  [ 97%]
tests/test_report_parser_issue.py::TestReportParserWithRealData::test_specific_insumo_is_parsed_correctly FAILED                                 [100%]

======================================================================= FAILURES =======================================================================
___________________________________________________ TestAppEndpoints.test_get_estimate_with_session ____________________________________________________

self = <test_app.TestAppEndpoints testMethod=test_get_estimate_with_session>

    def test_get_estimate_with_session(self):
        with self.client as c:
            data = {
                "presupuesto": self._get_test_file("presupuesto.csv", PRESUPUESTO_DATA),
                "apus": self._get_test_file("apus.csv", APUS_DATA),
                "insumos": self._get_test_file("insumos.csv", INSUMOS_DATA),
            }
            # Set the app config directly for the test
            c.application.config["APP_CONFIG"] = TEST_CONFIG
            c.post("/upload", data=data, content_type="multipart/form-data")

            # Usa los nuevos parámetros que incluyen la cuadrilla
            estimate_params = {"material": "TEJA", "cuadrilla": "1"}
            response = c.post("/api/estimate", json=estimate_params)
            self.assertEqual(response.status_code, 200)
            json_data = json.loads(response.data)

            # Los valores esperados deben coincidir con el cálculo en test_estimator
>           self.assertAlmostEqual(json_data["valor_suministro"], 50000.0)
E           AssertionError: 0.0 != 50000.0 within 7 places (50000.0 difference)

tests/test_app.py:62: AssertionError
________________________________________________ TestEstimator.test_calculate_estimate_flexible_search _________________________________________________

self = <test_estimator.TestEstimator testMethod=test_calculate_estimate_flexible_search>

    def test_calculate_estimate_flexible_search(self):
        """
        Tests the flexible search logic and validates the final calculated value.
        """
        data_store = process_all_files(
            self.presupuesto_path, self.apus_path, self.insumos_path, config=TEST_CONFIG
        )

        params = {"material": "TEJA", "cuadrilla": "2"}
        result = calculate_estimate(params, data_store, TEST_CONFIG)

        self.assertNotIn("error", result)
>       self.assertAlmostEqual(result["valor_construccion"], 68160.0, places=2)
E       AssertionError: np.float64(17600.0) != 68160.0 within 2 places (np.float64(50560.0) difference)

tests/test_estimator.py:75: AssertionError
_________________________________________________ TestEstimator.test_calculate_estimate_logic_two_step _________________________________________________

self = <test_estimator.TestEstimator testMethod=test_calculate_estimate_logic_two_step>

    def test_calculate_estimate_logic_two_step(self):
        """
        Tests the refactored calculate_estimate function with the new two-step search logic.
        """
        data_store = process_all_files(
            self.presupuesto_path, self.apus_path, self.insumos_path, config=TEST_CONFIG
        )

        # 1. Caso de prueba principal con la nueva lógica
        params = {"material": "TEJA", "cuadrilla": "1"}
        result = calculate_estimate(params, data_store, TEST_CONFIG)

        self.assertNotIn("error", result)
>       self.assertIn(
            "Suministro: SUMINISTRO TEJA TRAPEZOIDAL ROJA CAL.28",
            result["apu_encontrado"]
        )
E       AssertionError: 'Suministro: SUMINISTRO TEJA TRAPEZOIDAL ROJA CAL.28' not found in 'Suministro: No encontrado | Tarea: INSTALACION TEJA TRAPEZOIDAL | Cuadrilla: CUADRILLA TIPO 1 (1 OF + 2 AYU)'

tests/test_estimator.py:52: AssertionError
______________________________________________ TestCSVProcessor.test_abnormally_high_cost_triggers_error _______________________________________________

self = <test_procesador_csv.TestCSVProcessor testMethod=test_abnormally_high_cost_triggers_error>

    def test_abnormally_high_cost_triggers_error(self):
        """
        Tests that if the total construction cost is abnormally high, an error is returned.
        """
        # Create data that will result in a very high cost
        PRESUPUESTO_ALTO = (
            "ITEM;DESCRIPCION;UND;CANT.;VR. UNIT;VR.TOTAL\n"
            "1,1;Costo Alto;M2;1000000;1000001;1000001000000\n" # > 1e12
        )
        APUS_ALTO = (
            "ITEM: 1,1\n"
            "Costo Alto\n"
            "MATERIALES\n"
            "Material Caro;UN;1;0;1000001;1000001\n"
        )
        presupuesto_path = "test_presupuesto_alto.csv"
        apus_path = "test_apus_alto.csv"
        with open(presupuesto_path, "w", encoding="latin1") as f:
            f.write(PRESUPUESTO_ALTO)
        with open(apus_path, "w", encoding="latin1") as f:
            f.write(APUS_ALTO)

        with self.assertLogs('app.procesador_csv', level='ERROR') as cm:
            resultado = process_all_files(
                presupuesto_path, apus_path, self.insumos_path, config=TEST_CONFIG
            )
>           self.assertTrue(any("COSTO TOTAL ANORMALMENTE ALTO" in msg for msg in cm.output))
E           AssertionError: False is not true

tests/test_procesador_csv.py:248: AssertionError
------------------------------------------------------------------ Captured log call -------------------------------------------------------------------
WARNING  app.report_parser:report_parser.py:464 🚨 No se encontró unidad explícita, se inferirá más tarde
WARNING  app.report_parser:report_parser.py:1174 🚫 Rechazando insumo con valor total excesivo: 1000001.0
WARNING  app.report_parser:report_parser.py:155 ⚠️ No se extrajeron datos de APU, devolviendo DataFrame vacío.
__________________________________________ TestCSVProcessor.test_process_all_files_structure_and_calculations __________________________________________

self = <test_procesador_csv.TestCSVProcessor testMethod=test_process_all_files_structure_and_calculations>

    def test_process_all_files_structure_and_calculations(self):
        resultado = process_all_files(
            self.presupuesto_path, self.apus_path, self.insumos_path, config=TEST_CONFIG
        )
        self.assertIsInstance(resultado, dict)
        self.assertNotIn("error", resultado)
        presupuesto_procesado = resultado["presupuesto"]
        self.assertEqual(len(presupuesto_procesado), 4)
        item1 = next(
            (item for item in presupuesto_procesado if item["CODIGO_APU"] == "1,1"), None
        )
        self.assertIsNotNone(item1)
>       self.assertAlmostEqual(item1["VALOR_CONSTRUCCION_UN"], 50000.0)
E       AssertionError: 0.0 != 50000.0 within 7 places (50000.0 difference)

tests/test_procesador_csv.py:114: AssertionError
________________________________________ TestReportParserWithRealData.test_specific_insumo_is_parsed_correctly _________________________________________

self = <test_report_parser_issue.TestReportParserWithRealData testMethod=test_specific_insumo_is_parsed_correctly>

    def test_specific_insumo_is_parsed_correctly(self):
        """
        Tests that a specific known insumo is parsed correctly.
        """
        # Example insumo from apus.csv
        # LAMINA DE 1.22 X 3.05 MTS CAL. 22 PINTADA INCLUIDO
        # IVA;UND;0,33;14,04;174.928,81;65.403,35
        insumo_desc = "LAMINA DE 1.22 X 3.05 MTS CAL. 22 PINTADA INCLUIDO IVA"
        insumo = self.df[self.df["DESCRIPCION_INSUMO"] == insumo_desc]
>       self.assertTrue(
            not insumo.empty, "The specific insumo 'LAMINA...' was not found."
        )
E       AssertionError: False is not true : The specific insumo 'LAMINA...' was not found.

tests/test_report_parser_issue.py:62: AssertionError
=============================================================== short test summary info ================================================================
FAILED tests/test_app.py::TestAppEndpoints::test_get_estimate_with_session - AssertionError: 0.0 != 50000.0 within 7 places (50000.0 difference)
FAILED tests/test_estimator.py::TestEstimator::test_calculate_estimate_flexible_search - AssertionError: np.float64(17600.0) != 68160.0 within 2 places (np.float64(50560.0) difference)
FAILED tests/test_estimator.py::TestEstimator::test_calculate_estimate_logic_two_step - AssertionError: 'Suministro: SUMINISTRO TEJA TRAPEZOIDAL ROJA CAL.28' not found in 'Suministro: No encontrado | Tarea: INSTALACION TEJA TRAPEZOIDAL | Cuadrilla: CUADRILLA TIPO 1 (1 OF + 2 AYU)'
FAILED tests/test_procesador_csv.py::TestCSVProcessor::test_abnormally_high_cost_triggers_error - AssertionError: False is not true
FAILED tests/test_procesador_csv.py::TestCSVProcessor::test_process_all_files_structure_and_calculations - AssertionError: 0.0 != 50000.0 within 7 places (50000.0 difference)
FAILED tests/test_report_parser_issue.py::TestReportParserWithRealData::test_specific_insumo_is_parsed_correctly - AssertionError: False is not true : The specific insumo 'LAMINA...' was not found.
============================================================ 6 failed, 32 passed in 11.88s =============================================================