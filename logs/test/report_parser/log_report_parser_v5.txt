================================================================= test session starts ==================================================================
platform darwin -- Python 3.12.3, pytest-8.4.2, pluggy-1.6.0 -- /Users/gerardomayor/Documents/estru_techos/apu_filter/.venv/bin/python3
cachedir: .pytest_cache
rootdir: /Users/gerardomayor/Documents/estru_techos/apu_filter
configfile: pyproject.toml
collected 33 items

tests/test_app.py::TestCSVProcessor::test_process_all_files_structure_and_calculations PASSED                                                    [  3%]
tests/test_app.py::TestAppEndpoints::test_get_estimate_with_session PASSED                                                                       [  6%]
tests/test_data_validator.py::TestDataValidator::test_validate_and_clean_data_integration PASSED                                                 [  9%]
tests/test_data_validator.py::TestDataValidator::test_validate_extreme_costs PASSED                                                              [ 12%]
tests/test_data_validator.py::TestDataValidator::test_validate_missing_descriptions PASSED                                                       [ 15%]
tests/test_data_validator.py::TestDataValidator::test_validate_zero_quantity_with_cost PASSED                                                    [ 18%]
tests/test_estimator.py::TestEstimator::test_calculate_estimate_logic_two_step PASSED                                                            [ 21%]
tests/test_models.py::TestProbabilityModels::test_sanitize_value PASSED                                                                          [ 24%]
tests/test_models.py::TestProbabilityModels::test_simulation_handles_empty_input PASSED                                                          [ 27%]
tests/test_models.py::TestProbabilityModels::test_simulation_handles_missing_columns PASSED                                                      [ 30%]
tests/test_models.py::TestProbabilityModels::test_simulation_handles_zero_cost_input PASSED                                                      [ 33%]
tests/test_models.py::TestProbabilityModels::test_simulation_returns_correct_structure PASSED                                                    [ 36%]
tests/test_models.py::TestProbabilityModels::test_simulation_values_are_reasonable PASSED                                                        [ 39%]
tests/test_report_parser.py::TestNewReportParser::test_apu_code_cleaning PASSED                                                                  [ 42%]
tests/test_report_parser.py::TestNewReportParser::test_basic_parsing_and_context_detection PASSED                                                [ 45%]
tests/test_report_parser.py::TestNewReportParser::test_category_detection_variations FAILED                                                      [ 48%]
tests/test_report_parser.py::TestNewReportParser::test_discard_insumo_with_zero_values FAILED                                                    [ 51%]
tests/test_report_parser.py::TestNewReportParser::test_edge_cases_numeric_conversion PASSED                                                      [ 54%]
tests/test_report_parser.py::TestNewReportParser::test_encoding_handling FAILED                                                                  [ 57%]
tests/test_report_parser.py::TestNewReportParser::test_error_handling FAILED                                                                     [ 60%]
tests/test_report_parser.py::TestNewReportParser::test_fallback_parsing_mechanism FAILED                                                         [ 63%]
tests/test_report_parser.py::TestNewReportParser::test_ignore_garbage_lines PASSED                                                               [ 66%]
tests/test_report_parser.py::TestNewReportParser::test_large_file_performance PASSED                                                             [ 69%]
tests/test_report_parser.py::TestNewReportParser::test_mano_de_obra_compleja_logic FAILED                                                        [ 72%]
tests/test_report_parser.py::TestNewReportParser::test_mano_de_obra_simple_logic PASSED                                                          [ 75%]
tests/test_report_parser.py::TestNewReportParser::test_mo_detection_by_keywords FAILED                                                           [ 78%]
tests/test_report_parser.py::TestNewReportParser::test_multiple_apus_parsing PASSED                                                              [ 81%]
tests/test_report_parser.py::TestNewReportParser::test_normalized_text_functionality PASSED                                                      [ 84%]
tests/test_report_parser.py::TestNewReportParser::test_prevent_data_contamination FAILED                                                         [ 87%]
tests/test_report_parser.py::TestNewReportParser::test_stats_tracking FAILED                                                                     [ 90%]
tests/test_report_parser_issue.py::TestReportParserWithRealData::test_dataframe_is_not_empty_with_real_data PASSED                               [ 93%]
tests/test_report_parser_issue.py::TestReportParserWithRealData::test_finds_a_significant_number_of_apus PASSED                                  [ 96%]
tests/test_report_parser_issue.py::TestReportParserWithRealData::test_specific_insumo_is_parsed_correctly PASSED                                 [100%]

======================================================================= FAILURES =======================================================================
________________________________________________ TestNewReportParser.test_category_detection_variations ________________________________________________

self = <test_report_parser.TestNewReportParser testMethod=test_category_detection_variations>

    def test_category_detection_variations(self):
        """Prueba detección de categorías con variaciones de formato."""
        category_data = (
            "ITEM: 7777\n"
            "MATERIALES Y SUMINISTROS\n"
            "Material 1;UND;1;;100;100\n"
            "MANO DE OBRA DIRECTA\n"
            "Obrero;JOR;1;;150;150\n"
            "EQUIPOS Y HERRAMIENTAS\n"
            "Equipo 1;UND;1;;200;200\n"
            "OTROS GASTOS\n"
            "Gasto 1;UND;1;;50;50\n"
            "TRANSPORTE\n"
            "Transporte 1;UND;1;;75;75\n"
        )
        test_file = self._create_test_file("categories.txt", category_data)

        parser = ReportParser(test_file)
        df = parser.parse()

>       self.assertEqual(len(df), 5)
E       AssertionError: 3 != 5

tests/test_report_parser.py:355: AssertionError
_______________________________________________ TestNewReportParser.test_discard_insumo_with_zero_values _______________________________________________

self = <test_report_parser.TestNewReportParser testMethod=test_discard_insumo_with_zero_values>

    def test_discard_insumo_with_zero_values(self):
        """Verifica descarte de insumos con valores cero."""
        zero_value_data = (
            "ITEM: 456\n"
            "MATERIALES\n"
            "Insumo bueno;UND;1;;100;100\n"
            "Insumo malo;UND;0;;0;0\n"
            "Insumo con cantidad cero;UND;0;;50;0\n"
            "Insumo con total cero;UND;2;;0;0\n"
            "Otro insumo bueno;UND;2;;50;100\n"
        )
        test_file = self._create_test_file("zero_value.txt", zero_value_data)

        parser = ReportParser(test_file)
        df = parser.parse()

>       self.assertEqual(len(df), 2, "Solo insumos con valores positivos deberían agregarse.")
E       AssertionError: 3 != 2 : Solo insumos con valores positivos deberían agregarse.

tests/test_report_parser.py:236: AssertionError
______________________________________________________ TestNewReportParser.test_encoding_handling ______________________________________________________

self = <test_report_parser.TestNewReportParser testMethod=test_encoding_handling>

    def test_encoding_handling(self):
        """Prueba el manejo de diferentes codificaciones."""
        # Crear archivo con caracteres especiales
        special_chars_data = (
            "ITEM: ENCODING-01\n"
            "MATERIALES\n"
            "Material ñoño con carácter €;UND;1;;100;100\n"
            "Material con símbolo ®;UND;1;;100;100\n"
        )
>       test_file = self._create_test_file("encoding.txt", special_chars_data)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_report_parser.py:447:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_report_parser.TestNewReportParser testMethod=test_encoding_handling>, filename = 'encoding.txt'
content = 'ITEM: ENCODING-01\nMATERIALES\nMaterial ñoño con carácter €;UND;1;;100;100\nMaterial con símbolo ®;UND;1;;100;100\n'

    def _create_test_file(self, filename: str, content: str) -> str:
        """
        Crea un archivo de prueba en el directorio temporal y devuelve su ruta.
        El contenido se codifica en 'latin1' para simular los archivos reales.
        """
        path = os.path.join(self.temp_dir, filename)
        with open(path, "w", encoding="latin1") as f:
>           f.write(content)
E           UnicodeEncodeError: 'latin-1' codec can't encode character '\u20ac' in position 56: ordinal not in range(256)

tests/test_report_parser.py:54: UnicodeEncodeError
_______________________________________________________ TestNewReportParser.test_error_handling ________________________________________________________

self = <test_report_parser.TestNewReportParser testMethod=test_error_handling>

    def test_error_handling(self):
        """Prueba el manejo de errores del parser."""
        # Test con archivo que no existe
>       with self.assertRaises(Exception):
E       AssertionError: Exception not raised

tests/test_report_parser.py:367: AssertionError
------------------------------------------------------------------ Captured log call -------------------------------------------------------------------
ERROR    app.report_parser:report_parser.py:102 ❌ Error crítico al parsear archivo_que_no_existe.txt: [Errno 2] No such file or directory: 'archivo_que_no_existe.txt'
Traceback (most recent call last):
  File "/Users/gerardomayor/Documents/estru_techos/apu_filter/app/report_parser.py", line 96, in parse
    with open(self.file_path, "r", encoding="latin1") as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'archivo_que_no_existe.txt'
_________________________________________________ TestNewReportParser.test_fallback_parsing_mechanism __________________________________________________

self = <test_report_parser.TestNewReportParser testMethod=test_fallback_parsing_mechanism>

    def test_fallback_parsing_mechanism(self):
        """Prueba el mecanismo de fallback para líneas estructuradas no reconocidas."""
        fallback_data = (
            "ITEM: 8801\n"
            "MATERIALES\n"
            "Material desconocido;COD123;2.5;DESC;75.50;188.75\n"
            "Otro material;COD456;1.0;DESC;100.00;100.00\n"
        )
        test_file = self._create_test_file("fallback.txt", fallback_data)

        parser = ReportParser(test_file)
        df = parser.parse()

        # Debería parsear al menos algunos datos mediante fallback
        self.assertGreater(len(df), 0)
        if len(df) > 0:
>           self.assertIn("FALLBACK", df["FORMATO_ORIGEN"].iloc[0])
E           AssertionError: 'FALLBACK' not found in 'INSUMO_GENERAL'

tests/test_report_parser.py:190: AssertionError
_________________________________________________ TestNewReportParser.test_mano_de_obra_compleja_logic _________________________________________________

self = <test_report_parser.TestNewReportParser testMethod=test_mano_de_obra_compleja_logic>

    def test_mano_de_obra_compleja_logic(self):
        """Verifica la lógica para la mano de obra compleja (formato SAGUT)."""
        mo_data = (
            "ITEM: 9901\n"
            "MANO DE OBRA\n"
            "OFICIAL DE PRIMERA;80.000;1,75;140.000;0,5;70.000\n"
            "AYUDANTE;60.000;1,75;105.000;1,0;105.000\n"
        )
        test_file = self._create_test_file("mo_compleja.txt", mo_data)

        parser = ReportParser(test_file)
        df = parser.parse()

        self.assertEqual(len(df), 2)

        # Verificar primer insumo
        oficial = df[df["DESCRIPCION_INSUMO"] == "OFICIAL DE PRIMERA"].iloc[0]
        self.assertAlmostEqual(oficial["CANTIDAD_APU"], 0.5, places=4)
        self.assertAlmostEqual(oficial["RENDIMIENTO"], 0.5, places=4)
        self.assertAlmostEqual(oficial["PRECIO_UNIT_APU"], 140000, places=2)
        self.assertEqual(oficial["FORMATO_ORIGEN"], "MO_COMPLEJA")

        # Verificar segundo insumo
        ayudante = df[df["DESCRIPCION_INSUMO"] == "AYUDANTE"].iloc[0]
>       self.assertAlmostEqual(ayudante["CANTIDAD_APU"], 1.0, places=4)
E       AssertionError: np.float64(1.75) != 1.0 within 4 places (np.float64(0.75) difference)

tests/test_report_parser.py:135: AssertionError
__________________________________________________ TestNewReportParser.test_mo_detection_by_keywords ___________________________________________________

self = <test_report_parser.TestNewReportParser testMethod=test_mo_detection_by_keywords>

    def test_mo_detection_by_keywords(self):
        """Verifica que MO se detecte correctamente por keywords incluso sin categoría."""
        mo_data = (
            "ITEM: 9903\n"
            "SERVICIOS\n"  # Categoría incorrecta, pero keywords deben detectar MO
            "M.O. OFICIAL ALBAÑILERIA;;1;;150000;15000\n"
            "MANO DE OBRA ESPECIALIZADA;;2;;200000;40000\n"
        )
        test_file = self._create_test_file("mo_keywords.txt", mo_data)

        parser = ReportParser(test_file)
        df = parser.parse()

>       self.assertEqual(len(df), 2)
E       AssertionError: 1 != 2

tests/test_report_parser.py:170: AssertionError
_________________________________________________ TestNewReportParser.test_prevent_data_contamination __________________________________________________

self = <test_report_parser.TestNewReportParser testMethod=test_prevent_data_contamination>

    def test_prevent_data_contamination(self):
        """Prueba que no hay contaminación entre APUs."""
        contamination_data = (
            "DESCRIPCION DEL PRIMER APU\n"
            "ITEM: APU-VALIDO-1\n"
            "MATERIALES\n"
            "Cemento;UND;1;;100;100\n"
            "\n"
            "DESCRIPCION DEL APU PLANTILLA\n"
            "Insumo fantasma;UND;10;;10;100\n"
            "Obrero fantasma;JOR;8;;20;160\n"
        )
        test_file = self._create_test_file("contamination.txt", contamination_data)

        parser = ReportParser(test_file)
        df = parser.parse()

>       self.assertEqual(len(df), 1, "Solo los insumos del APU con 'ITEM:' deben ser parseados.")
E       AssertionError: 3 != 1 : Solo los insumos del APU con 'ITEM:' deben ser parseados.

tests/test_report_parser.py:259: AssertionError
_______________________________________________________ TestNewReportParser.test_stats_tracking ________________________________________________________

self = <test_report_parser.TestNewReportParser testMethod=test_stats_tracking>

    def test_stats_tracking(self):
        """Verifica que las estadísticas de parsing se calculen correctamente."""
        stats_data = (
            "ITEM: STATS-01\n"
            "MATERIALES\n"
            "Material 1;UND;1;;100;100\n"
            "Material 2;UND;2;;50;100\n"
            "MANO DE OBRA\n"
            "Obrero;JOR;1;;150;150\n"
            "EQUIPO\n"
            "Equipo 1;UND;1;;200;200\n"
        )
        test_file = self._create_test_file("stats.txt", stats_data)

        parser = ReportParser(test_file)
        df = parser.parse()

        # Verificar estadísticas básicas
        stats = parser.stats
        self.assertEqual(stats["items_found"], 1)
>       self.assertEqual(stats["insumos_parsed"], 2)  # 2 materiales + 1 equipo
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError: 3 != 2

tests/test_report_parser.py:397: AssertionError
=============================================================== short test summary info ================================================================
FAILED tests/test_report_parser.py::TestNewReportParser::test_category_detection_variations - AssertionError: 3 != 5
FAILED tests/test_report_parser.py::TestNewReportParser::test_discard_insumo_with_zero_values - AssertionError: 3 != 2 : Solo insumos con valores positivos deberían agregarse.
FAILED tests/test_report_parser.py::TestNewReportParser::test_encoding_handling - UnicodeEncodeError: 'latin-1' codec can't encode character '\u20ac' in position 56: ordinal not in range(256)
FAILED tests/test_report_parser.py::TestNewReportParser::test_error_handling - AssertionError: Exception not raised
FAILED tests/test_report_parser.py::TestNewReportParser::test_fallback_parsing_mechanism - AssertionError: 'FALLBACK' not found in 'INSUMO_GENERAL'
FAILED tests/test_report_parser.py::TestNewReportParser::test_mano_de_obra_compleja_logic - AssertionError: np.float64(1.75) != 1.0 within 4 places (np.float64(0.75) difference)
FAILED tests/test_report_parser.py::TestNewReportParser::test_mo_detection_by_keywords - AssertionError: 1 != 2
FAILED tests/test_report_parser.py::TestNewReportParser::test_prevent_data_contamination - AssertionError: 3 != 1 : Solo los insumos del APU con 'ITEM:' deben ser parseados.
FAILED tests/test_report_parser.py::TestNewReportParser::test_stats_tracking - AssertionError: 3 != 2
============================================================= 9 failed, 24 passed in 8.71s =============================================================