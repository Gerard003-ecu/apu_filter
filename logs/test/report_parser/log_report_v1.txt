================================================================= test session starts ==================================================================
platform darwin -- Python 3.12.3, pytest-8.4.2, pluggy-1.6.0 -- /Users/gerardomayor/Documents/estru_techos/apu_filter/.venv/bin/python3
cachedir: .pytest_cache
rootdir: /Users/gerardomayor/Documents/estru_techos/apu_filter
configfile: pyproject.toml
collected 4 items                                                                                                                                      

tests/test_report_parser.py::TestReportParser::test_assigns_insumos_to_correct_apu_and_category FAILED                                           [ 25%]
tests/test_report_parser.py::TestReportParser::test_finds_correct_number_of_apus FAILED                                                          [ 50%]
tests/test_report_parser.py::TestReportParser::test_parses_special_case_herramienta_menor FAILED                                                 [ 75%]
tests/test_report_parser.py::TestReportParser::test_parses_standard_insumo_correctly FAILED                                                      [100%]

======================================================================= FAILURES =======================================================================
__________________________________________ TestReportParser.test_assigns_insumos_to_correct_apu_and_category ___________________________________________

self = <test_report_parser.TestReportParser testMethod=test_assigns_insumos_to_correct_apu_and_category>

    def test_assigns_insumos_to_correct_apu_and_category(self):
        """
        Verifica que los insumos se asignan al APU y categoría correctos.
        """
        # Verificar un insumo del segundo APU
>       insumo_soldadura = self.df[self.df["descripcion"].str.contains("soldadura pvc")]
                                   ^^^^^^^^^^^^^^^^^^^^^^

tests/test_report_parser.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/pandas/core/frame.py:4107: in __getitem__
    indexer = self.columns.get_loc(key)
              ^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RangeIndex(start=0, stop=0, step=1), key = 'descripcion'

    @doc(Index.get_loc)
    def get_loc(self, key) -> int:
        if is_integer(key) or (is_float(key) and key.is_integer()):
            new_key = int(key)
            try:
                return self._range.index(new_key)
            except ValueError as err:
                raise KeyError(key) from err
        if isinstance(key, Hashable):
>           raise KeyError(key)
E           KeyError: 'descripcion'

.venv/lib/python3.12/site-packages/pandas/core/indexes/range.py:417: KeyError
__________________________________________________ TestReportParser.test_finds_correct_number_of_apus __________________________________________________

self = <test_report_parser.TestReportParser testMethod=test_finds_correct_number_of_apus>

    def test_finds_correct_number_of_apus(self):
        """
        Verifica que el parser identifica el número correcto de APUs únicos.
        """
>       apu_codes = self.df["apu_code"].unique()
                    ^^^^^^^^^^^^^^^^^^^

tests/test_report_parser.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/pandas/core/frame.py:4107: in __getitem__
    indexer = self.columns.get_loc(key)
              ^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RangeIndex(start=0, stop=0, step=1), key = 'apu_code'

    @doc(Index.get_loc)
    def get_loc(self, key) -> int:
        if is_integer(key) or (is_float(key) and key.is_integer()):
            new_key = int(key)
            try:
                return self._range.index(new_key)
            except ValueError as err:
                raise KeyError(key) from err
        if isinstance(key, Hashable):
>           raise KeyError(key)
E           KeyError: 'apu_code'

.venv/lib/python3.12/site-packages/pandas/core/indexes/range.py:417: KeyError
_____________________________________________ TestReportParser.test_parses_special_case_herramienta_menor ______________________________________________

self = <test_report_parser.TestReportParser testMethod=test_parses_special_case_herramienta_menor>

    def test_parses_special_case_herramienta_menor(self):
        """
        Verifica que el caso especial de 'Herramienta Menor' se parsea correctamente.
        """
>       herramienta = self.df[self.df["descripcion"] == "equipo y herramienta (5%)"]
                              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_report_parser.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/pandas/core/frame.py:4107: in __getitem__
    indexer = self.columns.get_loc(key)
              ^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RangeIndex(start=0, stop=0, step=1), key = 'descripcion'

    @doc(Index.get_loc)
    def get_loc(self, key) -> int:
        if is_integer(key) or (is_float(key) and key.is_integer()):
            new_key = int(key)
            try:
                return self._range.index(new_key)
            except ValueError as err:
                raise KeyError(key) from err
        if isinstance(key, Hashable):
>           raise KeyError(key)
E           KeyError: 'descripcion'

.venv/lib/python3.12/site-packages/pandas/core/indexes/range.py:417: KeyError
________________________________________________ TestReportParser.test_parses_standard_insumo_correctly ________________________________________________

self = <test_report_parser.TestReportParser testMethod=test_parses_standard_insumo_correctly>

    def test_parses_standard_insumo_correctly(self):
        """
        Verifica que un insumo estándar se parsea con los valores correctos.
        """
        # Buscar el insumo específico
>       insumo = self.df[self.df["descripcion"].str.contains("lamina de 1.22")]
                         ^^^^^^^^^^^^^^^^^^^^^^

tests/test_report_parser.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/pandas/core/frame.py:4107: in __getitem__
    indexer = self.columns.get_loc(key)
              ^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RangeIndex(start=0, stop=0, step=1), key = 'descripcion'

    @doc(Index.get_loc)
    def get_loc(self, key) -> int:
        if is_integer(key) or (is_float(key) and key.is_integer()):
            new_key = int(key)
            try:
                return self._range.index(new_key)
            except ValueError as err:
                raise KeyError(key) from err
        if isinstance(key, Hashable):
>           raise KeyError(key)
E           KeyError: 'descripcion'

.venv/lib/python3.12/site-packages/pandas/core/indexes/range.py:417: KeyError
=============================================================== short test summary info ================================================================
FAILED tests/test_report_parser.py::TestReportParser::test_assigns_insumos_to_correct_apu_and_category - KeyError: 'descripcion'
FAILED tests/test_report_parser.py::TestReportParser::test_finds_correct_number_of_apus - KeyError: 'apu_code'
FAILED tests/test_report_parser.py::TestReportParser::test_parses_special_case_herramienta_menor - KeyError: 'descripcion'
FAILED tests/test_report_parser.py::TestReportParser::test_parses_standard_insumo_correctly - KeyError: 'descripcion'
================================================================== 4 failed in 5.75s ===================================================================