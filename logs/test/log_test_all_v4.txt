=========================================== test session starts ============================================
platform linux -- Python 3.12.11, pytest-8.4.2, pluggy-1.6.0 -- /home/gerardo/Documentos/GitHub/apu_filter/.venv/bin/python3
cachedir: .pytest_cache
rootdir: /home/gerardo/Documentos/GitHub/apu_filter
configfile: pyproject.toml
collected 24 items                                                                                         

tests/test_app.py::TestAppEndpoints::test_get_estimate_with_session FAILED                           [  4%]
tests/test_apu_processor.py::TestAPUProcessor::test_exclusion_of_metadata_insumos FAILED             [  8%]
tests/test_apu_processor.py::TestAPUProcessor::test_mo_rendimiento_calculation FAILED                [ 12%]
tests/test_apu_processor.py::TestAPUProcessor::test_numeric_conversion_and_calculations PASSED       [ 16%]
tests/test_apu_processor.py::TestAPUProcessor::test_unit_inference PASSED                            [ 20%]
tests/test_data_validator.py::TestDataValidator::test_validate_and_clean_data_integration PASSED     [ 25%]
tests/test_data_validator.py::TestDataValidator::test_validate_extreme_costs PASSED                  [ 29%]
tests/test_data_validator.py::TestDataValidator::test_validate_missing_descriptions PASSED           [ 33%]
tests/test_data_validator.py::TestDataValidator::test_validate_zero_quantity_with_cost PASSED        [ 37%]
tests/test_estimator.py::TestEstimatorWithNewData::test_calculate_estimate_flexible_search PASSED    [ 41%]
tests/test_estimator.py::TestEstimatorWithNewData::test_calculate_estimate_logic_two_step FAILED     [ 45%]
tests/test_models.py::TestProbabilityModels::test_sanitize_value PASSED                              [ 50%]
tests/test_models.py::TestProbabilityModels::test_simulation_handles_empty_input PASSED              [ 54%]
tests/test_models.py::TestProbabilityModels::test_simulation_handles_missing_columns PASSED          [ 58%]
tests/test_models.py::TestProbabilityModels::test_simulation_handles_zero_cost_input PASSED          [ 62%]
tests/test_models.py::TestProbabilityModels::test_simulation_returns_correct_structure PASSED        [ 66%]
tests/test_models.py::TestProbabilityModels::test_simulation_values_are_reasonable PASSED            [ 70%]
tests/test_procesador_csv.py::TestCSVProcessorWithNewData::test_abnormally_high_cost_triggers_error FAILED [ 75%]
tests/test_procesador_csv.py::TestCSVProcessorWithNewData::test_cartesian_explosion_on_final_merge PASSED [ 79%]
tests/test_procesador_csv.py::TestCSVProcessorWithNewData::test_process_all_files_structure_and_calculations FAILED [ 83%]
tests/test_report_parser_crudo.py::TestReportParserCrudo::test_basic_raw_extraction PASSED           [ 87%]
tests/test_report_parser_crudo.py::TestReportParserCrudo::test_inline_description_extraction PASSED  [ 91%]
tests/test_report_parser_crudo.py::TestReportParserCrudo::test_multiple_apus_raw PASSED              [ 95%]
tests/test_report_parser_crudo.py::TestReportParserCrudo::test_no_numeric_conversion PASSED          [100%]

================================================= FAILURES =================================================
_____________________________ TestAppEndpoints.test_get_estimate_with_session ______________________________

self = <test_app.TestAppEndpoints testMethod=test_get_estimate_with_session>

    def test_get_estimate_with_session(self):
        """
        Prueba el flujo completo de carga de datos y solicitud de estimación.
    
        Simula una petición POST a `/upload` con los archivos de prueba y luego
        una petición POST a `/api/estimate` para verificar que el cálculo se
        realiza correctamente utilizando los datos de la sesión.
        """
        with self.client as c:
            # Simular la carga de archivos para crear una sesión de datos
            data = {
                "presupuesto": self._get_test_file("presupuesto.csv", PRESUPUESTO_DATA),
                "apus": self._get_test_file("apus.csv", APUS_DATA),
                "insumos": self._get_test_file("insumos.csv", INSUMOS_DATA),
            }
            # Asignar la configuración de prueba directamente a la aplicación
            c.application.config["APP_CONFIG"] = TEST_CONFIG
            upload_response = c.post(
                "/upload", data=data, content_type="multipart/form-data"
            )
            self.assertEqual(upload_response.status_code, 200)
    
            # Solicitar una estimación con los parámetros definidos
            estimate_params = {"material": "TEJA", "cuadrilla": "1"}
            response = c.post("/api/estimate", json=estimate_params)
            self.assertEqual(response.status_code, 200)
            json_data = json.loads(response.data)
    
            # Aserciones basadas en los nuevos datos de prueba (ver test_estimator.py)
>           self.assertAlmostEqual(json_data["valor_suministro"], 52000.0, places=2)
E           AssertionError: 50000.0 != 52000.0 within 2 places (2000.0 difference)

tests/test_app.py:106: AssertionError
-------------------------------------------- Captured log call ---------------------------------------------
ERROR    app.apu_processor:apu_processor.py:653 🚨 NO SE ENCONTRARON INSUMOS DE INSTALACION
___________________________ TestAPUProcessor.test_exclusion_of_metadata_insumos ____________________________

self = <test_apu_processor.TestAPUProcessor testMethod=test_exclusion_of_metadata_insumos>

    def test_exclusion_of_metadata_insumos(self):
        """
        Asegura que los insumos que representan metadatos (como 'EQUIPO Y
        HERRAMIENTA') sean filtrados y no se incluyan en el resultado final.
        """
        raw_records = [
            {
                "apu_code": "APU-META-01",
                "apu_desc": "Prueba Metadatos",
                "apu_unit": "UND",
                "category": "OTROS",
                "insumo_line": "EQUIPO Y HERRAMIENTA MENOR;%;5;;;15000",
            },
            {
                "apu_code": "APU-META-01",
                "apu_desc": "Prueba Metadatos",
                "apu_unit": "UND",
                "category": "OTROS",
                "insumo_line": "Insumo Valido;UND;1;;1000;1000",
            },
        ]
        processor = APUProcessor(raw_records)
        df = processor.process_all()
    
>       self.assertEqual(len(df), 1)
E       AssertionError: 2 != 1

tests/test_apu_processor.py:118: AssertionError
-------------------------------------------- Captured log call ---------------------------------------------
ERROR    app.apu_processor:apu_processor.py:651 🚨 NO SE ENCONTRARON INSUMOS DE SUMINISTRO
ERROR    app.apu_processor:apu_processor.py:653 🚨 NO SE ENCONTRARON INSUMOS DE INSTALACION
_____________________________ TestAPUProcessor.test_mo_rendimiento_calculation _____________________________

self = <test_apu_processor.TestAPUProcessor testMethod=test_mo_rendimiento_calculation>

    def test_mo_rendimiento_calculation(self):
        """
        Prueba que el cálculo del rendimiento para insumos de mano de obra
        se ejecute correctamente cuando el campo está ausente.
        """
        raw_records = [
            {
                "apu_code": "APU-MO-01",
                "apu_desc": "Prueba MO",
                "apu_unit": "JOR",
                "category": "MANO DE OBRA",
                "insumo_line": "OFICIAL;;0.1;;150000;15000",
            }
        ]
        processor = APUProcessor(raw_records)
        df = processor.process_all()
    
        self.assertEqual(len(df), 1)
        # Rendimiento = 150000 / 15000 = 10
>       self.assertAlmostEqual(df.iloc[0]["RENDIMIENTO"], 10.0)
E       AssertionError: np.float64(0.1) != 10.0 within 7 places (np.float64(9.9) difference)

tests/test_apu_processor.py:73: AssertionError
-------------------------------------------- Captured log call ---------------------------------------------
ERROR    app.apu_processor:apu_processor.py:651 🚨 NO SE ENCONTRARON INSUMOS DE SUMINISTRO
ERROR    app.apu_processor:apu_processor.py:653 🚨 NO SE ENCONTRARON INSUMOS DE INSTALACION
_____________________ TestEstimatorWithNewData.test_calculate_estimate_logic_two_step ______________________

self = <test_estimator.TestEstimatorWithNewData testMethod=test_calculate_estimate_logic_two_step>

    def test_calculate_estimate_logic_two_step(self):
        """
        Prueba el escenario ideal donde existen APUs claros y separados para
        suministro e instalación de un material.
    
        Verifica que `calculate_estimate` identifique correctamente cada APU,
        extraiga los valores correctos y calcule el costo total de construcción
        y el rendimiento esperado.
        """
        params = {"material": "TEJA", "cuadrilla": "1"}
        result = calculate_estimate(params, self.data_store, TEST_CONFIG)
    
        self.assertNotIn("error", result)
        # Verificar que se encontraron las descripciones correctas
        self.assertIn(
            "Suministro: SUMINISTRO TEJA TRAPEZOIDAL ROJA CAL.28",
            result["apu_encontrado"],
        )
        self.assertIn("Tarea: INSTALACION TEJA TRAPEZOIDAL", result["apu_encontrado"])
        self.assertIn(
            "Cuadrilla: CUADRILLA TIPO 1 (1 OF + 2 AYU)", result["apu_encontrado"]
        )
    
        # Verificar los valores calculados con los nuevos datos
>       self.assertAlmostEqual(result["valor_suministro"], 52000.0, places=2)
E       AssertionError: 50000.0 != 52000.0 within 2 places (2000.0 difference)

tests/test_estimator.py:93: AssertionError
___________________ TestCSVProcessorWithNewData.test_abnormally_high_cost_triggers_error ___________________

self = <test_procesador_csv.TestCSVProcessorWithNewData testMethod=test_abnormally_high_cost_triggers_error>

    def test_abnormally_high_cost_triggers_error(self):
        """
        Valida que el sistema detecte y rechace un presupuesto con costos
        totales anormalmente altos, previniendo errores por datos de entrada
        incorrectos.
        """
        # Datos con una cantidad extremadamente alta en el presupuesto
        presupuesto_alto = (
            "ITEM;DESCRIPCION;UND;CANT.;VR. UNIT;VR.TOTAL\n"
            "1.1;SUMINISTRO TEJA;M2;20000000;52000;1040000000000\n"
        )
        presupuesto_alto_path = "test_presupuesto_alto.csv"
        with open(presupuesto_alto_path, "w", encoding="latin1") as f:
            f.write(presupuesto_alto)
    
        APUS_ALTO = (
            "ITEM: 1.1; UNIDAD: M2\n"
            "SUMINISTRO TEJA TRAPEZOIDAL ROJA CAL.28\n"
            "MATERIALES\n"
            "TEJA TRAPEZOIDAL ROJA;M2;1.05;;47619;52000\n"
        )
        apus_alto_path = "test_apus_alto.csv"
        with open(apus_alto_path, "w", encoding="latin1") as f:
            f.write(APUS_ALTO)
    
        with self.assertLogs('app.procesador_csv', level='ERROR') as cm:
            resultado = process_all_files(
                presupuesto_alto_path, apus_alto_path, self.insumos_path, config=TEST_CONFIG
            )
            # Verificar que el log contiene el mensaje de error esperado
>           self.assertTrue(any("COSTO TOTAL ANORMALMENTE ALTO" in msg for msg in cm.output))
E           AssertionError: False is not true

tests/test_procesador_csv.py:121: AssertionError
-------------------------------------------- Captured log call ---------------------------------------------
WARNING  app.apu_processor:apu_processor.py:264 Inconsistencia: 1.05 * 47619.0 = 49999.950000000004 pero valor_total = 52000.0
ERROR    app.apu_processor:apu_processor.py:651 🚨 NO SE ENCONTRARON INSUMOS DE SUMINISTRO
ERROR    app.apu_processor:apu_processor.py:653 🚨 NO SE ENCONTRARON INSUMOS DE INSTALACION
______________ TestCSVProcessorWithNewData.test_process_all_files_structure_and_calculations _______________

self = <test_procesador_csv.TestCSVProcessorWithNewData testMethod=test_process_all_files_structure_and_calculations>

    def test_process_all_files_structure_and_calculations(self):
        """
        Prueba el caso de éxito del procesamiento.
    
        Verifica que la estructura del `data_store` resultante sea la correcta,
        que no contenga errores y que los cálculos clave (como el valor de
        construcción de un APU) sean precisos según los datos de entrada.
        """
        resultado = process_all_files(
            self.presupuesto_path, self.apus_path, self.insumos_path, config=TEST_CONFIG
        )
    
        self.assertIsInstance(resultado, dict)
        self.assertNotIn(
            "error", resultado, f"El procesamiento falló: {resultado.get('error')}"
        )
    
        presupuesto_procesado = resultado["presupuesto"]
        self.assertEqual(
            len(presupuesto_procesado), 4, "Deberían procesarse 4 ítems."
        )
    
        # Buscar el ítem 1.1 y verificar su valor de construcción
        item1_1 = next(
            (item for item in presupuesto_procesado if item["CODIGO_APU"] == "1.1"), None
        )
        self.assertIsNotNone(item1_1, "El ítem 1.1 no fue encontrado.")
>       self.assertAlmostEqual(item1_1["VALOR_CONSTRUCCION_UN"], 52000.0, places=2)
E       AssertionError: 50000.0 != 52000.0 within 2 places (2000.0 difference)

tests/test_procesador_csv.py:89: AssertionError
-------------------------------------------- Captured log call ---------------------------------------------
ERROR    app.apu_processor:apu_processor.py:653 🚨 NO SE ENCONTRARON INSUMOS DE INSTALACION
========================================= short test summary info ==========================================
FAILED tests/test_app.py::TestAppEndpoints::test_get_estimate_with_session - AssertionError: 50000.0 != 52000.0 within 2 places (2000.0 difference)
FAILED tests/test_apu_processor.py::TestAPUProcessor::test_exclusion_of_metadata_insumos - AssertionError: 2 != 1
FAILED tests/test_apu_processor.py::TestAPUProcessor::test_mo_rendimiento_calculation - AssertionError: np.float64(0.1) != 10.0 within 7 places (np.float64(9.9) difference)
FAILED tests/test_estimator.py::TestEstimatorWithNewData::test_calculate_estimate_logic_two_step - AssertionError: 50000.0 != 52000.0 within 2 places (2000.0 difference)
FAILED tests/test_procesador_csv.py::TestCSVProcessorWithNewData::test_abnormally_high_cost_triggers_error - AssertionError: False is not true
FAILED tests/test_procesador_csv.py::TestCSVProcessorWithNewData::test_process_all_files_structure_and_calculations - AssertionError: 50000.0 != 52000.0 within 2 places (2000.0 difference)
====================================== 6 failed, 18 passed in 26.77s =======================================