E501 Line too long (109 > 93)
  --> app/estimator.py:10:94
   |
 8 | logger = logging.getLogger(__name__)
 9 |
10 | def _find_apu_by_keywords(df_pool: pd.DataFrame, keywords: List[str], log: List[str]) -> Optional[pd.Series]:
   |                                                                                              ^^^^^^^^^^^^^^^^
11 |     """Función auxiliar para buscar un APU por palabras clave."""
12 |     log.append(f"Buscando con palabras clave: {keywords} en {len(df_pool)} APUs.")
   |

E501 Line too long (108 > 93)
  --> app/estimator.py:22:94
   |
20 |     return None
21 |
22 | def calculate_estimate(params: Dict[str, str], data_store: Dict) -> Dict[str, Union[str, float, List[str]]]:
   |                                                                                              ^^^^^^^^^^^^^^^
23 |     log = []
24 |     # ... (validación de parámetros como antes) ...
   |

E501 Line too long (109 > 93)
  --> app/estimator.py:60:94
   |
58 |         valor_suministro = apu_encontrado["VALOR_SUMINISTRO_UN"]
59 |         apu_suministro_desc = apu_encontrado["DESCRIPCION_APU"]
60 |         log.append(f"APU de Suministro encontrado: '{apu_suministro_desc}'. Valor: ${valor_suministro:,.0f}")
   |                                                                                              ^^^^^^^^^^^^^^^^
61 |     else:
62 |         log.append("No se encontró APU de suministro. Fallback a insumos no implementado.")
   |

E501 Line too long (112 > 93)
  --> app/estimator.py:77:94
   |
75 |         tiempo_instalacion = apu_encontrado["TIEMPO_INSTALACION"]
76 |         apu_instalacion_desc = apu_encontrado["DESCRIPCION_APU"]
77 |         log.append(f"APU de Instalación encontrado: '{apu_instalacion_desc}'. Valor: ${valor_instalacion:,.0f}")
   |                                                                                              ^^^^^^^^^^^^^^^^^^^
78 |     else:
79 |         log.append("No se encontró APU de instalación.")
   |

E501 Line too long (101 > 93)
  --> app/estimator.py:96:94
   |
94 |         "valor_construccion": valor_construccion,
95 |         "tiempo_instalacion": tiempo_instalacion,
96 |         "apu_encontrado": f"Suministro: {apu_suministro_desc} | Instalación: {apu_instalacion_desc}",
   |                                                                                              ^^^^^^^^
97 |         "log": "\n".join(log),
98 |     }
   |

E701 Multiple statements on one line (colon)
   --> app/procesador_csv.py:263:18
    |
261 |     """Lee y limpia el archivo presupuesto (CSV o Excel) de forma robusta."""
262 |     df = safe_read_dataframe(path)
263 |     if df is None: return pd.DataFrame()
    |                  ^
264 |     try:
265 |         column_map = config.get("presupuesto_column_map", {})
    |

E501 Line too long (96 > 93)
   --> app/procesador_csv.py:275:94
    |
273 |         df = df[df["CODIGO_APU"].notna() & (df["CODIGO_APU"] != "")]
274 |
275 |         cantidad_str = df["CANTIDAD_PRESUPUESTO"].astype(str).str.replace(",", ".", regex=False)
    |                                                                                              ^^^
276 |         df["CANTIDAD_PRESUPUESTO"] = pd.to_numeric(cantidad_str, errors="coerce")
277 |         return df[["CODIGO_APU", "DESCRIPCION_APU", "CANTIDAD_PRESUPUESTO"]]
    |

E501 Line too long (94 > 93)
   --> app/procesador_csv.py:531:94
    |
530 |         # 4. Limpiar y crear la columna de búsqueda normalizada
531 |         df_processed_apus["DESCRIPCION_APU"] = df_processed_apus["DESCRIPCION_APU"].fillna("")
    |                                                                                              ^
532 |         df_processed_apus["DESC_NORMALIZED"] = normalize_text(
533 |             df_processed_apus["DESCRIPCION_APU"]
    |

E701 Multiple statements on one line (colon)
  --> app/report_parser.py:70:20
   |
68 |     def _process_line(self, line: str):
69 |         line = line.strip()
70 |         if not line: return
   |                    ^
71 |
72 |         # --- Lógica de Máquina de Estados ---
   |

E501 Line too long (109 > 93)
   --> app/report_parser.py:106:94
    |
104 |         # La guardamos para usarla cuando encontremos el próximo "ITEM:"
105 |         first_part = line.split(';')[0].strip()
106 |         if first_part and "SUBTOTAL" not in first_part.upper() and "COSTO DIRECTO" not in first_part.upper():
    |                                                                                              ^^^^^^^^^^^^^^^^
107 |             self.potential_apu_desc = first_part
    |

E701 Multiple statements on one line (colon)
   --> app/report_parser.py:142:17
    |
140 |     def _to_numeric_safe(self, s: Optional[str]) -> float:
141 |         # ... (función de limpieza numérica como la tienes)
142 |         if not s: return 0.0
    |                 ^
143 |         s_cleaned = s.replace(" ", "").replace(".", "").replace(",", ".").strip()
144 |         if not s_cleaned or s_cleaned == "-": return 0.0
    |

E701 Multiple statements on one line (colon)
   --> app/report_parser.py:144:45
    |
142 |         if not s: return 0.0
143 |         s_cleaned = s.replace(" ", "").replace(".", "").replace(",", ".").strip()
144 |         if not s_cleaned or s_cleaned == "-": return 0.0
    |                                             ^
145 |         try:
146 |             return float(s_cleaned)
    |

Found 12 errors.