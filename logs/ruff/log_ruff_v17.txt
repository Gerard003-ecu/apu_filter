F841 Local variable `cuadrilla` is assigned to but never used
   --> app/procesador_csv.py:717:5
    |
715 |     tipo = params.get("tipo", "").upper()
716 |     material = params.get("material", "").upper()
717 |     cuadrilla = params.get("cuadrilla", "0")
    |     ^^^^^^^^^
718 |     log.append(f"Parámetros de entrada: {params}")
    |
help: Remove assignment to unused variable `cuadrilla`

E501 Line too long (107 > 93)
   --> app/procesador_csv.py:762:94
    |
760 |                 )
761 |             else:
762 |                 log.append(f"Coincidencia '{mejor_coincidencia}' encontrada pero sin APU correspondiente.")
    |                                                                                              ^^^^^^^^^^^^^^
763 |         else:
764 |             log.append("No se encontró un APU de suministro con buena coincidencia.")
    |

E501 Line too long (95 > 93)
   --> app/procesador_csv.py:804:94
    |
802 |     # Filtro 1: Debe contener "MANO DE OBRA" (case-insensitive)
803 |     df_inst = df_inst[
804 |         df_inst["DESC_NORMALIZED"].str.contains("MANO DE OBRA|MANO OBRA", na=False, case=False)
    |                                                                                              ^^
805 |     ]
806 |     log.append(f"Paso 1: {len(df_inst)} APUs con 'MANO DE OBRA'.")
    |

E501 Line too long (96 > 93)
   --> app/procesador_csv.py:811:94
    |
809 |     df_inst = df_inst[df_inst["DESC_NORMALIZED"].str.contains(tipo_mapped, na=False)]
810 |     log.append(f"Paso 2: {len(df_inst)} restantes tras filtrar por tipo '{tipo_mapped}'.")
811 |     # Filtro 3: Debe contener el material mapeado (ej. 'canal - solo lamina' o 'panel sandwich')
    |                                                                                              ^^^
812 |     df_inst = df_inst[df_inst["DESC_NORMALIZED"].str.contains(material_mapped, na=False)]
813 |     log.append(f"Paso 3: {len(df_inst)} restantes tras filtrar por material '{material_mapped}'.")
    |

E501 Line too long (98 > 93)
   --> app/procesador_csv.py:813:94
    |
811 |     # Filtro 3: Debe contener el material mapeado (ej. 'canal - solo lamina' o 'panel sandwich')
812 |     df_inst = df_inst[df_inst["DESC_NORMALIZED"].str.contains(material_mapped, na=False)]
813 |     log.append(f"Paso 3: {len(df_inst)} restantes tras filtrar por material '{material_mapped}'.")
    |                                                                                              ^^^^^
814 |
815 |     if not df_inst.empty:
    |

E501 Line too long (107 > 93)
   --> app/procesador_csv.py:817:94
    |
815 |     if not df_inst.empty:
816 |         opciones_instalacion = df_inst["DESC_NORMALIZED"].tolist()
817 |         # Usamos el material mapeado para encontrar la mejor coincidencia dentro de los APUs de instalación
    |                                                                                              ^^^^^^^^^^^^^^
818 |         mejor_coincidencia_inst = encontrar_mejor_coincidencia(
819 |             material_mapped, opciones_instalacion
    |

E501 Line too long (112 > 93)
   --> app/procesador_csv.py:836:94
    |
834 |                 )
835 |             else:
836 |                 log.append(f"Coincidencia '{mejor_coincidencia_inst}' encontrada pero sin APU correspondiente.")
    |                                                                                              ^^^^^^^^^^^^^^^^^^^
837 |         else:
838 |             log.append("No se encontró un APU de instalación con buena coincidencia tras el filtrado.")
    |

E501 Line too long (103 > 93)
   --> app/procesador_csv.py:838:94
    |
836 |                 log.append(f"Coincidencia '{mejor_coincidencia_inst}' encontrada pero sin APU correspondiente.")
837 |         else:
838 |             log.append("No se encontró un APU de instalación con buena coincidencia tras el filtrado.")
    |                                                                                              ^^^^^^^^^^
839 |     else:
840 |         log.append("ERROR: No se encontró un APU de instalación con los criterios iniciales.")
    |

E501 Line too long (94 > 93)
   --> app/procesador_csv.py:840:94
    |
838 |             log.append("No se encontró un APU de instalación con buena coincidencia tras el filtrado.")
839 |     else:
840 |         log.append("ERROR: No se encontró un APU de instalación con los criterios iniciales.")
    |                                                                                              ^
841 |
842 |     # --- 3. Devolver el Resultado Compuesto ---
    |

E501 Line too long (101 > 93)
 --> app/utils.py:8:94
  |
6 |     if not isinstance(code, str):
7 |         code = str(code)
8 |     # Estandariza a comas, elimina todo lo que no sea número o coma, y quita espacios/comas al final.
  |                                                                                              ^^^^^^^^
9 |     return re.sub(r'[^\d,]', '', code.replace('.', ',')).strip().rstrip(',')
  |

E501 Line too long (95 > 93)
   --> tests/test_app.py:100:94
    |
 98 | "1,1","REMATE CON PINTURA DE FABRICA CAL 22 DE 120 CMTS CURVO","ML","10","155,00","1550"
 99 | "1,2","ACABADOS FINALES","M2","20","225,00","4500"
100 | "1,3","MANO DE OBRA INSTALACION CUBIERTA TEJA SENCILLA CUADRILLA DE 5","M2","1","80000","80000"
    |                                                                                              ^^
101 | "1,4","SUMINISTRO TEJA SENCILLA","UN","1","50000","50000"
102 | """
    |

Found 11 errors.
No fixes available (1 hidden fix can be enabled with the `--unsafe-fixes` option).