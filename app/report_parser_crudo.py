import logging
import re
from enum import Enum
from typing import Dict, List
from collections import Counter

from .utils import clean_apu_code

logger = logging.getLogger(__name__)


class ParserState(Enum):
    """
    Define los estados posibles de la m√°quina de estados del parser.

    Attributes:
        IDLE: Estado inicial o esperando un nuevo APU.
        AWAITING_DESCRIPTION: Se encontr√≥ un c√≥digo de APU y espera la l√≠nea de descripci√≥n.
        SKIPPING_HEADERS: Ignorando l√≠neas de cabecera despu√©s de la descripci√≥n.
        PROCESSING_APU: Procesando activamente las l√≠neas de insumos de un APU.
    """
    IDLE = "IDLE"
    AWAITING_DESCRIPTION = "AWAITING_DESCRIPTION"
    SKIPPING_HEADERS = "SKIPPING_HEADERS"
    PROCESSING_APU = "PROCESSING_APU"


class ReportParserCrudo:
    """
    Extrae datos crudos de un archivo de reporte de APU sin procesar.

    Esta clase funciona como una m√°quina de estados para parsear un archivo de texto
    plano y extraer la informaci√≥n de los An√°lisis de Precios Unitarios (APU).
    La salida es una lista de diccionarios donde cada valor es una cadena de texto,
    sin aplicar conversiones de tipo ni l√≥gica de negocio compleja.

    Attributes:
        file_path (str): La ruta al archivo a parsear.
        raw_records (List[Dict[str, str]]): La lista de registros crudos extra√≠dos.
        state (ParserState): El estado actual de la m√°quina de estados.
        context (Dict[str, str]): Almacena informaci√≥n del APU actual (c√≥digo,
                                   descripci√≥n, unidad, categor√≠a).
        stats (Dict): Estad√≠sticas del proceso de parseo.
    """

    PATTERNS = {
        "item_code": re.compile(r"ITEM:\s*([^;]+)", re.IGNORECASE),
        "generic_data": re.compile(
            r"^(?P<descripcion>[^;]+);"
            r"(?P<col2>[^;]*);"
            r"(?P<col3>[^;]*);"
            r"(?P<col4>[^;]*);"
            r"(?P<col5>[^;]*);"
            r"(?P<col6>[^;]*)"
        ),
    }

    # Mejorado: Incluir variaciones comunes
    CATEGORY_KEYWORDS = {
        "MATERIALES", 
        "MANO DE OBRA", 
        "EQUIPO", 
        "EQUIPOS",
        "OTROS", 
        "TRANSPORTE",
        "TRANSPORTES",
        "HERRAMIENTA",
        "HERRAMIENTAS",
        "SUBCONTRATOS"
    }

    def __init__(self, file_path: str):
        """
        Inicializa el parser con la ruta del archivo.

        Args:
            file_path: La ruta al archivo de reporte de APU.
        """
        self.file_path = file_path
        self.raw_records: List[Dict[str, str]] = []
        self.state = ParserState.IDLE
        self.context = {
            "apu_code": "",
            "apu_desc": "",
            "apu_unit": "",
            "category": "INDEFINIDO",
        }
        # Nuevo: Estad√≠sticas para debugging
        self.stats = {
            "total_lines": 0,
            "apu_count": 0,
            "category_changes": Counter(),
            "skipped_lines": 0,
            "lines_by_state": Counter(),
        }

    def parse_to_raw(self) -> List[Dict[str, str]]:
        """
        Punto de entrada principal para iniciar el proceso de parseo.

        Lee el archivo l√≠nea por l√≠nea y procesa cada una seg√∫n la m√°quina de
        estados.

        Returns:
            Una lista de diccionarios, donde cada diccionario representa un
            registro de insumo crudo extra√≠do del archivo.
        """
        logger.info(f"üîç Iniciando extracci√≥n cruda desde: {self.file_path}")
        try:
            with open(self.file_path, "r", encoding="latin1") as f:
                for line_num, line in enumerate(f, 1):
                    self.stats["total_lines"] += 1
                    self._process_line(line, line_num)
        except Exception as e:
            logger.error(f"‚ùå Error al leer {self.file_path}: {e}")
            return []
        
        self._log_statistics()
        return self.raw_records

    def _log_statistics(self):
        """Registra estad√≠sticas del proceso de parseo para debugging."""
        logger.info(f"‚úÖ Extracci√≥n cruda completada: {len(self.raw_records)} registros")
        logger.info(f"üìä Estad√≠sticas del parseo:")
        logger.info(f"   - Total de l√≠neas procesadas: {self.stats['total_lines']}")
        logger.info(f"   - APUs detectados: {self.stats['apu_count']}")
        logger.info(f"   - L√≠neas omitidas: {self.stats['skipped_lines']}")
        logger.info(f"   - Cambios de categor√≠a detectados:")
        
        for category, count in self.stats['category_changes'].items():
            logger.info(f"      * {category}: {count} veces")
        
        # Advertencia si no se detectaron categor√≠as
        if sum(self.stats['category_changes'].values()) == 0:
            logger.warning("‚ö†Ô∏è  NO SE DETECTARON CAMBIOS DE CATEGOR√çA - Revisar formato del archivo")
        
        # Advertencia si todos los insumos est√°n como INDEFINIDO
        indefinidos = sum(1 for r in self.raw_records if r.get('category') == 'INDEFINIDO')
        if indefinidos == len(self.raw_records) and len(self.raw_records) > 0:
            logger.warning(f"‚ö†Ô∏è  TODOS los {indefinidos} insumos est√°n marcados como INDEFINIDO")

    def _process_line(self, line: str, line_num: int):
        """
        Procesa una √∫nica l√≠nea del archivo basado en el estado actual del parser.

        Args:
            line: La l√≠nea de texto a procesar.
            line_num: El n√∫mero de l√≠nea actual, para prop√≥sitos de logging.
        """
        line = line.strip()
        if not line:
            return

        self.stats["lines_by_state"][self.state.value] += 1

        # Detectar nuevo ITEM en cualquier estado
        if self._try_start_new_apu(line, line_num):
            return

        if self.state == ParserState.IDLE:
            self.stats["skipped_lines"] += 1
            return
        elif self.state == ParserState.AWAITING_DESCRIPTION:
            if self._is_valid_apu_description(line):
                self._capture_apu_description(line)
                self.state = ParserState.PROCESSING_APU
            else:
                self.stats["skipped_lines"] += 1
                return
        elif self.state == ParserState.PROCESSING_APU:
            # CR√çTICO: Detectar categor√≠a ANTES de verificar estructura de datos
            if self._try_detect_category_change(line):
                logger.debug(f"L√≠nea {line_num}: Categor√≠a detectada -> {self.context['category']}")
                return
            if self._has_data_structure(line):
                self._add_raw_record(insumo_line=line)
            else:
                logger.debug(f"L√≠nea {line_num}: Sin estructura de datos -> '{line[:50]}...'")
                self.stats["skipped_lines"] += 1

    def _try_start_new_apu(self, line: str, line_num: int) -> bool:
        """
        Intenta detectar el inicio de un nuevo APU en la l√≠nea.

        Si encuentra un "ITEM:", reinicia el contexto y cambia el estado
        del parser.

        Args:
            line: La l√≠nea de texto a analizar.
            line_num: El n√∫mero de l√≠nea actual.

        Returns:
            True si se encontr√≥ e inici√≥ un nuevo APU, False en caso contrario.
        """
        match = self.PATTERNS["item_code"].search(line.upper())
        if not match:
            return False

        raw_code = match.group(1).strip()
        if not raw_code:
            return False

        # Extraer descripci√≥n inline si existe
        inline_desc = self._extract_inline_description(line)

        # Extraer unidad inline si existe
        inline_unit = self._extract_inline_unit(line)

        self.context = {
            "apu_code": raw_code,
            "apu_desc": inline_desc,
            "apu_unit": inline_unit or "UND",
            "category": "INDEFINIDO",  # Reiniciar categor√≠a
        }

        self.stats["apu_count"] += 1
        logger.debug(f"L√≠nea {line_num}: Nuevo APU detectado -> {raw_code}")

        if inline_desc:
            self.state = ParserState.PROCESSING_APU
        else:
            self.state = ParserState.AWAITING_DESCRIPTION

        return True

    def _extract_inline_description(self, line: str) -> str:
        """
        Extrae la descripci√≥n de un APU si est√° en la misma l√≠nea que el "ITEM:".

        Args:
            line: La l√≠nea de texto.

        Returns:
            La descripci√≥n encontrada o una cadena vac√≠a.
        """
        patterns = [
            r'ITEM:\s*[^;]+;\s*(?:DESCRIPCION|DESCRIPCI√ìN)\s*:\s*([^;]+)',
            r'ITEM:\s*[^;]+;\s*([^;]+)',
        ]
        for pat in patterns:
            match = re.search(pat, line, re.IGNORECASE)
            if match:
                desc = match.group(1).strip()
                if len(desc) > 5 and not desc.upper().startswith(("UNIDAD", "DESCRIP")):
                    return desc
        return ""

    def _extract_inline_unit(self, line: str) -> str:
        """
        Extrae la unidad de un APU si est√° expl√≠citamente en la misma l√≠nea ("UNIDAD:").

        Args:
            line: La l√≠nea de texto.

        Returns:
            La unidad encontrada o una cadena vac√≠a.
        """
        match = re.search(r"UNIDAD\s*:\s*([^;,\s]+)", line, re.IGNORECASE)
        return match.group(1).strip() if match else ""

    def _is_valid_apu_description(self, line: str) -> bool:
        """
        Determina si una l√≠nea parece ser una descripci√≥n v√°lida de APU.

        Se usa cuando el parser est√° en estado AWAITING_DESCRIPTION.

        Args:
            line: La l√≠nea de texto.

        Returns:
            True si la l√≠nea parece una descripci√≥n v√°lida.
        """
        first_part = line.split(";")[0].strip()
        if len(first_part) < 5:
            return False
        if first_part.upper() in {
            "ITEM", "DESCRIPCION", "DESCRIPCI√ìN", "UNIDAD", "CANTIDAD", "VALOR TOTAL"
        }:
            return False
        if re.match(r"^[\d.,$%]+$", first_part):
            return False
        return True

    def _capture_apu_description(self, line: str):
        """
        Captura la descripci√≥n del APU desde la l√≠nea y la guarda en el contexto.

        Args:
            line: La l√≠nea que contiene la descripci√≥n.
        """
        desc = line.split(";")[0].strip()
        self.context["apu_desc"] = desc
        logger.debug(f"Descripci√≥n APU capturada: {desc[:50]}...")

    def _try_detect_category_change(self, line: str) -> bool:
        """
        Detecta si la l√≠nea es un cambio de categor√≠a (e.g., "MANO DE OBRA").
        
        MEJORADO: M√°s flexible y robusto en la detecci√≥n.

        Args:
            line: La l√≠nea de texto.

        Returns:
            True si la l√≠nea es un cambio de categor√≠a, False en caso contrario.
        """
        # Normalizar la l√≠nea para comparaci√≥n
        line_upper = line.upper().strip()
        
        # Obtener la primera parte (antes del primer ;)
        first_part = line_upper.split(";")[0].strip()
        
        # M√©todo 1: Coincidencia exacta en la primera parte
        if first_part in self.CATEGORY_KEYWORDS:
            self.context["category"] = first_part
            self.stats["category_changes"][first_part] += 1
            logger.debug(f"‚úì Categor√≠a detectada (exacta): {first_part}")
            return True
        
        # M√©todo 2: Buscar palabra clave en cualquier parte de la primera secci√≥n
        # (√∫til si hay caracteres especiales o espacios extra)
        for keyword in self.CATEGORY_KEYWORDS:
            if keyword in first_part:
                # Verificar que no sea parte de una descripci√≥n m√°s larga con datos num√©ricos
                # (evitar falsos positivos)
                if not self._looks_like_insumo_line(line):
                    self.context["category"] = keyword
                    self.stats["category_changes"][keyword] += 1
                    logger.debug(f"‚úì Categor√≠a detectada (contenida): {keyword} en '{first_part}'")
                    return True
        
        # M√©todo 3: Buscar en toda la l√≠nea si es corta (probablemente un encabezado)
        if len(line_upper) < 50 and ";" not in line_upper[10:]:  # Pocos puntos y comas
            for keyword in self.CATEGORY_KEYWORDS:
                if keyword in line_upper:
                    self.context["category"] = keyword
                    self.stats["category_changes"][keyword] += 1
                    logger.debug(f"‚úì Categor√≠a detectada (l√≠nea corta): {keyword}")
                    return True
        
        return False

    def _looks_like_insumo_line(self, line: str) -> bool:
        """
        Determina si una l√≠nea parece ser un insumo con datos num√©ricos.
        
        Ayuda a evitar falsos positivos en la detecci√≥n de categor√≠as.

        Args:
            line: La l√≠nea de texto.

        Returns:
            True si la l√≠nea parece contener datos de insumo.
        """
        parts = line.split(";")
        if len(parts) < 3:
            return False
        
        # Verificar si hay al menos 2 campos que parezcan num√©ricos
        numeric_fields = 0
        for part in parts[1:]:  # Saltar descripci√≥n
            part_clean = part.strip().replace(",", "").replace(".", "").replace("$", "")
            if part_clean and part_clean.replace("-", "").isdigit():
                numeric_fields += 1
        
        return numeric_fields >= 2

    def _has_data_structure(self, line: str) -> bool:
        """
        Verifica si una l√≠nea tiene la estructura de un insumo (contiene ';').

        Args:
            line: La l√≠nea de texto.

        Returns:
            True si la l√≠nea parece ser un insumo.
        """
        # Mejorado: Verificar que tenga suficientes columnas Y datos num√©ricos
        if line.count(";") < 2:
            return False
        
        # Verificar que no sea solo una l√≠nea de encabezado
        first_part = line.split(";")[0].strip().upper()
        if first_part in {"DESCRIPCION", "C√ìDIGO", "CODIGO", "UNIDAD", "CANTIDAD"}:
            return False
        
        return True

    def _add_raw_record(self, **kwargs):
        """
        Crea un nuevo registro crudo y lo a√±ade a la lista de resultados.

        Utiliza la informaci√≥n del contexto actual del APU.

        Args:
            **kwargs: Argumentos clave-valor, se espera 'insumo_line'.
        """
        cleaned_code = clean_apu_code(self.context["apu_code"])
        record = {
            "apu_code": cleaned_code,
            "apu_desc": self.context["apu_desc"],
            "apu_unit": self.context["apu_unit"],
            "category": self.context["category"],
            "insumo_line": kwargs.get("insumo_line", ""),
        }
        self.raw_records.append(record)
        
        # Debug logging cada ciertos registros
        if len(self.raw_records) % 100 == 0:
            logger.debug(f"Registros procesados: {len(self.raw_records)}, "
                        f"Categor√≠a actual: {self.context['category']}")
